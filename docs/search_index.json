[
["index.html", "Programação em Java Bem vindo!", " Programação em Java Djonathan Luiz de Oliveira Quadras 14/04/2020 Bem vindo! Bem vindo ao livro de programação em Java! Enjoy your visit! :) "],
["sobre-programação.html", "Sobre Programação Sobre o Livro Ferramentas Computacionais", " Sobre Programação Working on it! :) Sobre o Livro Working on it! :) Ferramentas Computacionais Working on it! :) "],
["lógicas-de-programação.html", "Capítulo 1 Lógicas de Programação 1.1 Pseudocódigos", " Capítulo 1 Lógicas de Programação Working on it! :) 1.1 Pseudocódigos Working on it! :) "],
["princípios-da-programação-em-java.html", "Capítulo 2 Princípios da Programação em Java 2.1 Classes 2.2 Objetos 2.3 Variáveis 2.4 Criando o primeiro código em Java", " Capítulo 2 Princípios da Programação em Java A linguagem Java é considerada como sendo de baixo nível, ou seja, sua programação (e consequentemente sua leitura) não é trivial como se estivéssemos escrevendo um livro. Ela se apresenta como sendo uma linguagem muito burocrática e que necessita de diversos processos para que funcione corretamente. Um código em Java sempre deverá ser montado com uma estrutura semelhante a apresentada na figura abaixo. Classes Um código é geralmente composto por Classes e Objetos. Esses pontos serão explicados nas subseções a seguir. 2.1 Classes As classes de programação são receitas de um objeto, aonde têm características e comportamentos, permitindo assim armazenar propriedades e métodos dentro dela. Uma classe geralmente representa um substantivo, por exemplo uma pessoa, um lugar ou um sistema. Vamos imaginar uma universidade. Ela é composta por diversas classes: alunos, professores, prédios, salas de aula. Note que uma classe pode ser parte de uma outra classe, ou seja, todas as classes apresentadas fazem parte de uma classe maior chamada de universidade. Mas afinal, o que diferencia uma classe da outra? A diferenciação, além do nome dado, está nos objetos que compõe a classe. 2.2 Objetos Objetos são caracterizados por atributos e métodos e são características definidas pelas classes. 2.2.1 Atributos ou Propriedades Atributos são as características de um objeto. Essas características também são conhecidas como variáveis. Utilizando o exemplo dos cães, temos alguns atributos, tais como: cor, peso, altura e nome. 2.2.2 Métodos Métodos são as ações que os objetos podem exercer quando solicitados, onde podem interagir e se comunicarem com outros objetos. Utilizando o exemplo dos cães, temos alguns exemplos: latir, correr, pular. 2.3 Variáveis Variáveis são uma forma de salvar informações no computador. As variáveis que nós armazenamos em um programa são acessadas pelo nome que nós atribuímos a elas. Uma variável pode ter seu valor alterado ao longo do programa, ou seja, seu valor é variável. É apenas necessário informar ao computador qual o tipo de informação será armazenado e, então, dar um nome ao valor. Existem muitos tipos de dados que podem ser utilizados para definir uma variável. Os principais estão listados abaixo. Table 2.1: Tipos de Variáveis Tipo Descrição int Números Inteiros double Números Decimais boolean Armazena apenas ‘Verdadeiro’ ou ‘Falso’ String Frases char Caracteres Existem diversos outros tipos de variáveis, que serão apresentados com maior detalhe nas seções seguintes. 2.4 Criando o primeiro código em Java A primeira etapa para a criação de um código em Java é a criação de uma classe. Por padrão, a classe principal do seu programa se chama “Main”. public class Main{ //Oi! Eu sou uma classe! } Perceba alguns pontos importantes: O código inicia com a palavra “public”. Isso indica que sua classe pode ser encontrada por outras classes que estiverem salvas no mesmo diretório. Você pode alterar por “private” ou “protected”; Há a presença de chaves { } no código. Isso é uma burocracia da linguagem. A classe é correspondente ao que está dentro das chaves. Tudo o que estiver fora delas não será considerado como parte do código; Para fazer comentários em Java, usa-se duas barras // . Agora que temos a nossa classe criada, necessitamos criar os objetos. Por agora vamos criar apenas um método. public class Main{ public static void main(String[] args){ System.out.println(&quot;Hello World!&quot;); } } Agora, dentro da nossa classe foi criado o método main. Isso também segue um padrão imposto pela linguagem. Há, novamente, alguns pontos que merecem destaque. A função “System.out.println()” é utilizada para escrever algum texto no console; Todas as linhas de código devem ser terminadas com um ponto e vírgula. Colocando este código para correr, deverá aparecer no console a mensagem “Hey, Hello World!”. Pronto! Você acaba de criar seu primeiro código! 2.4.1 Criando Variáveis Working on it! :) "],
["operadores.html", "Capítulo 3 Operadores 3.1 Operações Matemáticas 3.2 Operadores Relacionais 3.3 Lógica Booleana e Operadores Lógicos", " Capítulo 3 Operadores Um artifício essencial para quem programa é a utilização de operadores. Sejam eles matemáticos, lógicos ou relacionais, é praticamente impossível desenvolver um código sem utilizar um operador. Nessa seção serão apresentados e explicados os operadores em linguagem Java. 3.1 Operações Matemáticas É muito comum utilizarmos as operações matemáticas em programação. Frequentemente estaremos somando ou subtraindo duas variáveis. Com isso, torna-se necessário conhecer os operadores matemáticos em java. Os básicos estão listados na tabela abaixo. Table 3.1: Operações Matemáticas Operador Uso Descrição + x + y Soma x e y - x - y Subtrai y de x * x*y Multiplica x por y / x/y Divide x por y % x%y Calcula o resto da divisão de x por y Existem também os operadores incrementais. Estes operadores são utilizados quando queremos acrescentar (ou diminuir) uma unidade no valor de uma variável. Eles estão listados na tabela abaixo. Table 3.2: Operações Matemáticas Úteis Operador Uso Descrição ++ b++ Incrementa 1 em b, avaliando b antes de incrementar ++ b++ Incrementa 1 em b, avaliando b depois de incrementar – b– Decrementa 1 em b, avaliando b antes de incrementar – b– Decrementa 1 em b, avaliando b depois de incrementar 3.2 Operadores Relacionais Os operadores relacionais são utilizados quando queremos estabelecer relações entre as variáveis, ou seja, quando queremos comparar uma variável com a outra. Eles estão apresentados na tabela abaixo. Table 3.3: Operações Relacionais Operador Uso Descrição &gt; x &gt; y x é maior que y &gt;= x &gt;= y x é maior ou igual a y &lt; x &lt; y x é menor que y &lt;= x &lt;= y x é menor ou igual a y == x == y x é igual a y != x != y x é diferente de y Para utilizar outras ferramentas matemáticas, é necessário invocar a classe matemática do Java. Para isso, faz-se double valor = Math. e seleciona-se a função desejada (irá aparecer automaticamente uma lista com todas as opções possíveis. Por exemplo, é possível calcular a raiz quadrada, exponencial e cosseno conforme apresentado a seguir. double raiz = Math.sqrt(9); // raiz quadrada double exponencial = Math.exp(2); // e elevado ao quadrado double cosseno = Math.cos(Math.PI); //cosseno de pi em radianos 3.3 Lógica Booleana e Operadores Lógicos A lógica booleana foi desenvolvida no século 19 pelo matemático George Boole como um esquema para usar métodos algébricos na formalização da lógica e raciocínio. A álgebra booleana trabalha com dois números, 1 e 0. Para a programação, trataremos 1 como sendo “Verdadeiro” e 0 como sendo “falso”. As funções relacionais sempre gerarão resultados booleanos. Dessa forma, é possível utilizar operadores lógicos para trabalhar com as informações e gerar novos resultados. Os operadores lógicos são amplamente utilizados quando queremos criar expressões lógicas. Os operadores lógicos estão apresentados na tabela abaixo. Table 3.4: Operações Matemáticas Úteis Operador Descrição &amp; AND lógico | ou || OR lógico ^ XOR lógico ! NOT lógico 3.3.1 Operador AND O operador AND, ou “e”, retorna “verdadeiro” só e somente só quando está comparando dois booleanos com valor “verdadeiro. Table 3.5: Operações com Operador AND Valor 1 Operador Valor 2 Resultado true &amp; true true true &amp; false false false &amp; false false 3.3.2 Operador OR O operador OR, ou “ou”, retorna “verdadeiro” quando está comparando dois booleanos em que ao menos um tenha valor “verdadeiro. Table 3.6: Operações com Operador OR Valor 1 Operador Valor 2 Resultado true | true true true | false true false | false false 3.3.3 Operador XOR O operador XOR, ou “ou exclusivo”, retorna “verdadeiro” se só e somente só estiver comparando dois booleanos em que somente um dos valores seja “verdadeiro. Table 3.7: Operações com Operador XOR Valor 1 Operador Valor 2 Resultado true ^ true false true ^ false true false ^ false false 3.3.4 Operador NOT O operador NOT, ou “não”, retorna o valor contrário ao valor escolhido. Note que este operador compara dois valores, apenas muda de verdadeiro para falso e vice-versa. Table 3.8: Operações com Operador XOR Operador Valor Resultado ! true false ! false true !! true true Exercícios {-} "],
["extruturas-de-decisão-ou-seleção.html", "Capítulo 4 Extruturas de Decisão ou Seleção 4.1 If-Else 4.2 Operador Ternário 4.3 Switch Exercícios", " Capítulo 4 Extruturas de Decisão ou Seleção É comum nos códigos encontrarmos situações como a situação abaixo. Decisores Ou seja, o programa irá tomar uma decisão diferente para condições diferentes. Existem duas formas de selecionar em Java, que serão explicadas nas subseções seguintes. 4.1 If-Else A seleção por if tem a forma apresentada abaixo. Depois da palavra-chave if é necessária uma expressão booleana entre parênteses. Caso a expressão booleana resulte no valor true em tempo de execução então o bloco seguinte será executado, caso resulte em false aquele será ignorado. if(condiçãoBooleana){ //Instrução a ser executada caso a condiçãoBooleana seja verdadeira. } Existem também as variações do método if. Uma delas é o if/else. A instrução de seleção dupla if/else tem função complementar à de if: executa instruções no caso da expressão booleana de if resultar em false. if (condiçãoBooleana){ //instruções que serão executadas caso a condiçãoBooleana resulte true. } else { //instruções que serão executadas caso a condiçãoBooleana resulte false. } Complementar ao “if/else” temos o operador “else if”. Esse recurso possibilita adicionar uma nova condição à estrutura de decisão para atender a lógica sendo implementada. if (condiçãoBooleana) { //instruções que serão executadas caso a condiçãoBooleana resulte true. } else if(outraCondiçãoBooleana){ //instruções que serão executadas caso a outraCondiçãoBooleana resulte true. } 4.2 Operador Ternário O operador ternário é uma forma compacta de se montar um operador if-else. Ele é utilizado para alocar valor em alguma determinada variável. Diferentemente do if-else, ele não realiza operações. Sua estrutura é igual ao apresentado abaixo. var = (lógica booleana) ? (Valor 1):(Valor 2) Ou seja, a variável var receberá qualquer um dos dois valores dependendo do resultado da lógica booleana, recebendo o Valor 1 em caso de resultado igual a true e Valor 2 em caso de resultado igual a false. Perceba o caso abaixo. public class Main { public static void main(String[] args) { int a = 7; int b = 6; String valor; valor = a &gt; b ? &quot;a é maior que b&quot;:&quot;a é menor que b&quot;; } } Neste caso, como a de fato é maior que b, a lógica booleana resultará em um valor igual a true, retornando para a variável valor a string \"a é maior que b\". 4.3 Switch O operador switch é muito útil para a tomada de decisões em um programa. Sua estrutura se assemelha à uma estrada, onde os caminhos já estão pré-determinados. Dessa forma, a decisão de qual caminho seguir é baseada no valor da entrada do decisor. Switch A estrutura do sistema de decisão igual ao apresentado abaixo. A função switch irá avaliar a variável var. Cada case corresponde a um possível valor que var pode assumir. Caso o valor de var não esteja presente em nenhuma das opções, o switch irá para a opção default que é a resposta padrão. switch (var){ case Valor1: //Realiza as essas operações break; case Valor2: //Realiza as essas operações break; default: //Realiza as essas operações paadrão break; } A variável var pode ser de qualquer tipo (int, double, string…). Perceba o código apresentado abaixo. Se correr o código, será apresentado no console a resposta “Muito!”. public class Main { public static void main(String[] args) { String var = &quot;Disposto?&quot;; switch (var){ case &quot;Oi, tudo bem?&quot;: System.out.println(&quot;Tudo! E com voce?&quot;); break; case &quot;Bom dia!&quot;: System.out.println(&quot;Flor do Dia!&quot;); break; case &quot;Disposto?&quot;: System.out.println(&quot;Muito!&quot;); } } } Exercícios Qual a diferença entre uma estrutura de decisão estilo if-else e um Operador Ternário? Crie um código em Java que contenha uma variável do tipo inteiro e que imprima no console se o número é par ou ímpar. Faça um programa que contenha três variáveis: dinheiro, preço e limite do cartão. A variável “dinheiro” representa a quantidade de dinheiro presente na carteira, “preço” é o preço de um lanche e “limite no cartão” é o limite disponível para compras no cartão de crédito. O processo de análise é feito da seguinte forma (note que deve-se retornar, em caso de compra, qual o a opção de pagamento escolhida): Se houver dinheiro suficiente disponível na carteira, a compra será feita totalmente em dinheiro; Caso contrário, se houver limite disponível, a compra deverá ser feita totalmente no cartão de crédito; Caso contrário, deve-se analisar se é possível comprar o lanche juntando os valores de dinheiro disponível e limite de cartão; Caso seja possível, deve-se pagar a totalidade do valor disponível em dinheiro e pagar o restante em cartão. Neste caso, deve-se dizer quanto será pago no cartão; Caso contrário, deve-se retornar a mensagem “Você não pode pagar, que pena!”. Utilizando a mesma situação do exercício anterior, acrescente agora a variável booleana “vontade”, que é a vontade da pessoa em pagar o lanche utilizando o cartão. As análises que envolvem pagar com o cartão ficarão, então, em função dessa nova variável. Faça um código que receba uma variável do tipo inteiro de valor entre 1 e 5, cada um correspondente a um dia útil da semana. O código deve imprimir no console o dia da semana correspondente. Caso a variável tenha um valor diferente, o programa deve imprimir no console a frase “Esse não é dia de feira!”. Faça um código semelhante ao anterior. Crie uma variável do tipo string chamada idioma e faça com que o programa responda no console nos seguintes idiomas: português, inglês e espanhol. Caso seja inserido outro idioma, o programa deve responder “Idioma não reconhecido”. "],
["estruturas-de-repetição.html", "Capítulo 5 Estruturas de Repetição 5.1 For 5.2 While 5.3 Do-While Exercicios", " Capítulo 5 Estruturas de Repetição Nas linguagens de programação as estruturas de repetição são utilizadas para executar um conjunto de instruções ou funções repetidamente baseando-se em uma condição que determinará a continuação ou não da repetição. Existem três tipos: for, while e do-while, que serão explicados abaixo. 5.1 For A estrutura for é um comando de controle de fluxo que repete uma parte do código múltiplas vezes. É utilizado quando ocorrerá um número pré-determinado de repetições. Sua estrutura em Java é apresentada abaixo. for(int i = valorMinimo; i &lt;= valorMaximo; i++){ //Código } Dentro do parêntesis há quatro informações que devem ser declaradas: qual a variável que será utilizada como controle da repetição, seu valor inicial, seu valor final (critério de parada) e, por fim, quanto deve ser incrementado ou decrementado a cada repetição à variável. 5.2 While A estrutura while é um comando de controle de fluxo que executa uma parte do código múltiplas vezes baseado em uma dada condição booleana. É utilizado quando o número de repetições não é pré-determinado. A estrutura do código é apresentada abaixo. while (erro &gt; erroMaximo){ //Código } Dentro do parêntesis há apenas uma informação que deve ser preenchida: a condição de parada. Essa condição é estabelecida por uma lógica booleana, geralmente comparando dois valores. No exemplo temos a comparação de dois erros pois esta é uma lógica clássica aplicada a este tipo de repetição. 5.3 Do-While A estrutura do-while é um comando de controle e fluxo que executa uma parte do código pelo menos uma vez e a execução posterior depende da condição booleana especificada. É utilizado quando o número de iterações não é pré-determinado mas o código deve ser executado ao menos uma vez. Note que a diferença de um código para o outro está simplesmente no fato de a lógica booleana na estrutura while ser avaliada antes de correr o código, enquanto na estrutura do-while ela é avaliada após correr uma vez. A estrutura do código é apresentada abaixo. do{ //Código }while (erro &gt; erroMaximo); Dentro do parêntesis há apenas uma informação que deve ser preenchida: a condição de parada. Essa condição é estabelecida por uma lógica booleana, geralmente comparando dois valores. No exemplo temos a comparação de dois erros pois esta é uma lógica clássica aplicada a este tipo de repetição. Exercicios Qual a diferença de aplicação das estruturas de repetição for, while e do-while? Faça um código que conte até 10 no console. Faça um código que conte até 20, de 2 em 2. Faça um código que conte regressivamente de 10 a 0. Considere dois inteiros, a e b. Faça um programa que encontre a partir de qual o valor de a, quando elevado ao quadrado, será maior que b. Teste no programa os dois códigos abaixo. Perceba que eles têm o mesmo critério de parada. O que ocorre? Por que os resultados são diferentes? Código 1: public class Main { public static void main(String[] args) { int i = 0; while (i != 0){ System.out.println(i); i++; } System.out.println(i); } } Código 2: public class Main { public static void main(String[] args) { int i = 0; do { System.out.println(i); i++; } while (i != 0); System.out.println(i); } } "]
]
